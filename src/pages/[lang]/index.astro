---
import type { GetStaticPaths, InferGetStaticParamsType, InferGetStaticPropsType } from "astro";
import LocationHeader from "../../components/location/LocationHeader.astro";
import MonsterAvatar from "../../components/monster/MonsterAvatar.astro";
import { MonsterCounter } from "../../components/monster/MonsterCounter";
import { dataset, type Data } from "../../data";
import Layout from "../../layouts/Layout.astro";
import { langs } from "../../util/langs";

export const getStaticPaths = (() => {
  return langs.map((lang) => ({
    params: {
      lang,
    },
    props: {
      data: dataset[lang] as Data,
    },
  }));
}) satisfies GetStaticPaths;

type Params = InferGetStaticParamsType<typeof getStaticPaths>;
type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const { lang } = Astro.params as Params;
const { data } = Astro.props as Props;
---

<Layout lang={lang}>
  <ul role="list">
    {
      data.map(({ name, header, monsters }) => {
        return (
          <li class="flex flex-col items-center">
            <LocationHeader name={name} image={header} />
            <ul
              role="list"
              class="container grid gap-4 gap-y-8 p-4 py-8 pb-12 sm:grid-cols-2 lg:grid-cols-3 2xl:grid-cols-4 justify-center"
            >
              {monsters.map(({ id, name, image }) => (
                <li class="flex gap-4">
                  <MonsterAvatar name={name} image={image} />
                  <div class="flex flex-col ">
                    <h3 class="flex flex-1 items-center text-2xl text-white">{name}</h3>
                    <MonsterCounter client:load id={id} />
                  </div>
                </li>
              ))}
            </ul>
          </li>
        );
      })
    }
  </ul>
</Layout>
